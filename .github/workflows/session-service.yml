name: Session Service CI/CD

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string

jobs:
  test-build-push:
    runs-on: ubuntu-latest
    env:
      IMAGE_SHA: ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.service-name }}:${{ github.sha }}
      IMAGE_LATEST: ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.service-name }}:latest
      GO_VERSION: '1.24'
      TESTCONTAINERS_RYUK_DISABLED: 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: backend-go/go.sum

    - name: Run unit tests
      working-directory: backend-go/SessionService
      env:
        RABBITMQ_USER: admin
        RABBITMQ_PASSWORD: password
        RABBITMQ_HOST: localhost
        RABBITMQ_PORT: "5672"
        REDIS_HOST: localhost
        REDIS_PORT: "6379"
        REALTIME_SERVICE_HOST: "real-time"
        REALTIME_SERVICE_PORT: "8080"
        SESSION_SERVICE_HOST: "0.0.0.0"
        SESSION_SERVICE_PORT: "8081"
        JWT_SECRET_KEY: "dummy_secret"
        ENV: "test"
      run: |
        go test -v ./Rabbit/tests
        go test -v ./Storage/Redis/tests

    - name: Run integration tests
      working-directory: backend-go/SessionService
      env:
        RABBITMQ_USER: admin
        RABBITMQ_PASSWORD: password
        RABBITMQ_HOST: localhost
        RABBITMQ_PORT: "5672"
        REDIS_HOST: localhost
        REDIS_PORT: "6379"
        REALTIME_SERVICE_HOST: "real-time"
        REALTIME_SERVICE_PORT: "8080"
        SESSION_SERVICE_HOST: "0.0.0.0"
        SESSION_SERVICE_PORT: "8081"
        JWT_SECRET_KEY: "dummy_secret"
        ENV: "test"
      run: |
        go test -v ./integration_tests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      working-directory: backend-go
      run: |
        docker build -t $IMAGE_SHA -t $IMAGE_LATEST -f SessionService/Dockerfile .

    - name: Push Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker push $IMAGE_SHA
        docker push $IMAGE_LATEST

    - name: Set output image
      id: out
      run: echo "::set-output name=image::$IMAGE_SHA"

    outputs:
      image: ${{ steps.out.outputs.image }}
