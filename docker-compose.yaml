services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: kahoot_clone
      TZ: UTC
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d kahoot_clone" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  migrator:
    build:
      context: backend-python/shared
      dockerfile: Dockerfile
    environment:
      PYTHONPATH: ./shared
      DB_URL: postgresql+asyncpg://postgres:postgres_password@postgres:5432/kahoot_clone
    depends_on:
      postgres:
        condition: service_healthy

  auth:
    build:
      context: backend-python
      dockerfile: auth_service/Dockerfile
    ports:
      - "8000:8000"
    environment:
      SECRET_KEY: M7oif5ZAON9wGNDRw9X8-Q
      PYTHONPATH: ./app
      DB_URL: postgresql+asyncpg://postgres:postgres_password@postgres:5432/kahoot_clone
    depends_on:
      postgres:
        condition: service_healthy

  quiz:
    build:
      context: backend-python
      dockerfile: quiz_service/Dockerfile
    ports:
      - "8001:8000"
    environment:
      PYTHONPATH: ./app
      DB_URL: postgresql+asyncpg://postgres:postgres_password@postgres:5432/kahoot_clone
    depends_on:
      - auth

  react-frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/app:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true

  go-backend:
    build:
      context: backend-go
      dockerfile: Dockerfile
    ports:
      - "8080:8080"

volumes:
  postgres_data:

networks:
  default:
    driver: bridge