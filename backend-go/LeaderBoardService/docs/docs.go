// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/get-results": {
            "post": {
                "description": "Accepts session answers, computes user scores and returns leaderboard data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "leaderboard"
                ],
                "summary": "Compute leaderboard and get popular answers",
                "parameters": [
                    {
                        "description": "Session Answers Payload",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/shared.SessionAnswers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/shared.BoardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request or computation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "shared.Answer": {
            "type": "object",
            "properties": {
                "answered": {
                    "type": "boolean"
                },
                "correct": {
                    "description": "correctness of user's answer",
                    "type": "boolean"
                },
                "option": {
                    "description": "1-based option index",
                    "type": "string"
                },
                "timestamp": {
                    "description": "time when user has answered",
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "shared.BoardResponse": {
            "type": "object",
            "properties": {
                "popular": {
                    "$ref": "#/definitions/shared.PopularAns"
                },
                "session_code": {
                    "type": "string"
                },
                "table": {
                    "$ref": "#/definitions/shared.ScoreTable"
                }
            }
        },
        "shared.PopularAns": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "session_code": {
                    "type": "string"
                }
            }
        },
        "shared.ScoreTable": {
            "type": "object",
            "properties": {
                "session_code": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/shared.UserScore"
                    }
                }
            }
        },
        "shared.SessionAnswers": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/shared.Answer"
                    }
                },
                "options_amount": {
                    "description": "amount of total options available for the question",
                    "type": "integer"
                },
                "session_code": {
                    "type": "string"
                }
            }
        },
        "shared.UserScore": {
            "type": "object",
            "properties": {
                "place": {
                    "type": "integer"
                },
                "previous_place": {
                    "type": "integer"
                },
                "progress": {
                    "type": "string"
                },
                "total_score": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8082",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Пример API",
	Description:      "Это пример API с gorilla/mux и swaggo",
	InfoInstanceName: "swagger1",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
